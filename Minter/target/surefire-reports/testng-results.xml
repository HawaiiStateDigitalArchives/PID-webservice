<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="0" total="62" passed="62">
  <reporter-output>
  </reporter-output>
  <suite name="test.hida.MinterTest" duration-ms="19773" started-at="2016-01-12T14:53:00Z" finished-at="2016-01-12T14:53:20Z">
    <groups>
    </groups>
    <test name="Command line test" duration-ms="19773" started-at="2016-01-12T14:53:00Z" finished-at="2016-01-12T14:53:20Z">
      <class name="test.hida.MinterTest">
        <test-method status="PASS" signature="setUpTest()[pri:0, instance:test.hida.MinterTest@5e30e1c0]" name="setUpTest" is-config="true" duration-ms="226" started-at="2016-01-12T04:53:00Z" finished-at="2016-01-12T04:53:00Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method status="PASS" signature="setUpClass()[pri:0, instance:test.hida.MinterTest@5e30e1c0]" name="setUpClass" is-config="true" duration-ms="1" started-at="2016-01-12T04:53:00Z" finished-at="2016-01-12T04:53:00Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpClass -->
        <test-method status="PASS" signature="populateAutoDigitFormat()[pri:0, instance:test.hida.MinterTest@5e30e1c0]" name="populateAutoDigitFormat" duration-ms="105" started-at="2016-01-12T04:53:00Z" finished-at="2016-01-12T04:53:00Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- populateAutoDigitFormat -->
        <test-method status="PASS" signature="testBadParameterExceptionAutoMinter(long, java.lang.String, com.hida.TokenType, int, boolean)[pri:0, instance:test.hida.MinterTest@5e30e1c0]" name="testBadParameterExceptionAutoMinter" duration-ms="1" started-at="2016-01-12T04:53:00Z" data-provider="bad parameter auto" finished-at="2016-01-12T04:53:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-10]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[prefix]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[DIGIT]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <exception class="com.hida.BadParameterException">
            <message>
              <![CDATA[An invalid 'Requested Amount' was detected: -10]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.hida.BadParameterException: An invalid 'Requested Amount' was detected: -10
	at test.hida.MinterTest.testBadParameterExceptionAutoMinter(MinterTest.java:437)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:70)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:109)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:175)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:107)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:68)
]]>
            </full-stacktrace>
          </exception> <!-- com.hida.BadParameterException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBadParameterExceptionAutoMinter -->
        <test-method status="PASS" signature="testBadParameterExceptionAutoMinter(long, java.lang.String, com.hida.TokenType, int, boolean)[pri:0, instance:test.hida.MinterTest@5e30e1c0]" name="testBadParameterExceptionAutoMinter" duration-ms="0" started-at="2016-01-12T04:53:00Z" data-provider="bad parameter auto" finished-at="2016-01-12T04:53:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[!prefix]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[DIGIT]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <exception class="com.hida.BadParameterException">
            <message>
              <![CDATA[An invalid 'Prefix' was detected: !prefix]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.hida.BadParameterException: An invalid 'Prefix' was detected: !prefix
	at com.hida.Minter.<init>(Minter.java:152)
	at test.hida.MinterTest.testBadParameterExceptionAutoMinter(MinterTest.java:434)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:70)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:109)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:175)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:107)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:68)
]]>
            </full-stacktrace>
          </exception> <!-- com.hida.BadParameterException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBadParameterExceptionAutoMinter -->
        <test-method status="PASS" signature="testBadParameterExceptionAutoMinter(long, java.lang.String, com.hida.TokenType, int, boolean)[pri:0, instance:test.hida.MinterTest@5e30e1c0]" name="testBadParameterExceptionAutoMinter" duration-ms="1" started-at="2016-01-12T04:53:00Z" data-provider="bad parameter auto" finished-at="2016-01-12T04:53:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[                     ]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[DIGIT]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <exception class="com.hida.BadParameterException">
            <message>
              <![CDATA[An invalid 'Prefix' was detected:                      ]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.hida.BadParameterException: An invalid 'Prefix' was detected:                      
	at com.hida.Minter.<init>(Minter.java:152)
	at test.hida.MinterTest.testBadParameterExceptionAutoMinter(MinterTest.java:434)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:70)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:109)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:175)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:107)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:68)
]]>
            </full-stacktrace>
          </exception> <!-- com.hida.BadParameterException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBadParameterExceptionAutoMinter -->
        <test-method status="PASS" signature="testBadParameterExceptionAutoMinter(long, java.lang.String, com.hida.TokenType, int, boolean)[pri:0, instance:test.hida.MinterTest@5e30e1c0]" name="testBadParameterExceptionAutoMinter" duration-ms="0" started-at="2016-01-12T04:53:00Z" data-provider="bad parameter auto" finished-at="2016-01-12T04:53:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[prefix]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[DIGIT]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[-10]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <exception class="com.hida.BadParameterException">
            <message>
              <![CDATA[An invalid 'RootLength' was detected: -10]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.hida.BadParameterException: An invalid 'RootLength' was detected: -10
	at com.hida.Minter.<init>(Minter.java:146)
	at test.hida.MinterTest.testBadParameterExceptionAutoMinter(MinterTest.java:434)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:70)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:109)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:175)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:107)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:68)
]]>
            </full-stacktrace>
          </exception> <!-- com.hida.BadParameterException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBadParameterExceptionAutoMinter -->
        <test-method status="PASS" signature="testBadParameterExceptionAutoMinter(long, java.lang.String, com.hida.TokenType, int, boolean)[pri:0, instance:test.hida.MinterTest@5e30e1c0]" name="testBadParameterExceptionAutoMinter" duration-ms="0" started-at="2016-01-12T04:53:00Z" data-provider="bad parameter auto" finished-at="2016-01-12T04:53:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[prefix]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[DIGIT]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[11]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <exception class="com.hida.BadParameterException">
            <message>
              <![CDATA[An invalid 'RootLength' was detected: 11]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.hida.BadParameterException: An invalid 'RootLength' was detected: 11
	at com.hida.Minter.<init>(Minter.java:146)
	at test.hida.MinterTest.testBadParameterExceptionAutoMinter(MinterTest.java:434)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:70)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:109)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:175)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:107)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:68)
]]>
            </full-stacktrace>
          </exception> <!-- com.hida.BadParameterException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBadParameterExceptionAutoMinter -->
        <test-method status="PASS" signature="testUniqueIdAutoSequentialMinter(int, com.hida.TokenType)[pri:0, instance:test.hida.MinterTest@5e30e1c0]" name="testUniqueIdAutoSequentialMinter" duration-ms="57" started-at="2016-01-12T04:53:00Z" data-provider="autoMinter parameters" finished-at="2016-01-12T04:53:01Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[82]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[DIGIT]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUniqueIdAutoSequentialMinter -->
        <test-method status="PASS" signature="testUniqueIdAutoSequentialMinter(int, com.hida.TokenType)[pri:0, instance:test.hida.MinterTest@5e30e1c0]" name="testUniqueIdAutoSequentialMinter" duration-ms="44" started-at="2016-01-12T04:53:01Z" data-provider="autoMinter parameters" finished-at="2016-01-12T04:53:01Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[16]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[LOWERCASE]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUniqueIdAutoSequentialMinter -->
        <test-method status="PASS" signature="testUniqueIdAutoSequentialMinter(int, com.hida.TokenType)[pri:0, instance:test.hida.MinterTest@5e30e1c0]" name="testUniqueIdAutoSequentialMinter" duration-ms="85" started-at="2016-01-12T04:53:01Z" data-provider="autoMinter parameters" finished-at="2016-01-12T04:53:01Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[42]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[UPPERCASE]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUniqueIdAutoSequentialMinter -->
        <test-method status="PASS" signature="testUniqueIdAutoSequentialMinter(int, com.hida.TokenType)[pri:0, instance:test.hida.MinterTest@5e30e1c0]" name="testUniqueIdAutoSequentialMinter" duration-ms="285" started-at="2016-01-12T04:53:01Z" data-provider="autoMinter parameters" finished-at="2016-01-12T04:53:01Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[85]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[MIXEDCASE]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUniqueIdAutoSequentialMinter -->
        <test-method status="PASS" signature="testUniqueIdAutoSequentialMinter(int, com.hida.TokenType)[pri:0, instance:test.hida.MinterTest@5e30e1c0]" name="testUniqueIdAutoSequentialMinter" duration-ms="85" started-at="2016-01-12T04:53:01Z" data-provider="autoMinter parameters" finished-at="2016-01-12T04:53:01Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[35]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[LOWER_EXTENDED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUniqueIdAutoSequentialMinter -->
        <test-method status="PASS" signature="testUniqueIdAutoSequentialMinter(int, com.hida.TokenType)[pri:0, instance:test.hida.MinterTest@5e30e1c0]" name="testUniqueIdAutoSequentialMinter" duration-ms="200" started-at="2016-01-12T04:53:01Z" data-provider="autoMinter parameters" finished-at="2016-01-12T04:53:01Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[69]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[UPPER_EXTENDED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUniqueIdAutoSequentialMinter -->
        <test-method status="PASS" signature="testUniqueIdAutoSequentialMinter(int, com.hida.TokenType)[pri:0, instance:test.hida.MinterTest@5e30e1c0]" name="testUniqueIdAutoSequentialMinter" duration-ms="697" started-at="2016-01-12T04:53:01Z" data-provider="autoMinter parameters" finished-at="2016-01-12T04:53:02Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[60]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[MIXED_EXTENDED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUniqueIdAutoSequentialMinter -->
        <test-method status="PASS" signature="testUniqueIdRandomCustomMinter(int, java.lang.String, com.hida.TokenType)[pri:0, instance:test.hida.MinterTest@5e30e1c0]" name="testUniqueIdRandomCustomMinter" duration-ms="41" started-at="2016-01-12T04:53:02Z" data-provider="customMinter parameters" finished-at="2016-01-12T04:53:02Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[98]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[ddddd]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[DIGIT]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUniqueIdRandomCustomMinter -->
        <test-method status="PASS" signature="testUniqueIdRandomCustomMinter(int, java.lang.String, com.hida.TokenType)[pri:0, instance:test.hida.MinterTest@5e30e1c0]" name="testUniqueIdRandomCustomMinter" duration-ms="32" started-at="2016-01-12T04:53:02Z" data-provider="customMinter parameters" finished-at="2016-01-12T04:53:02Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[45]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[lllll]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[LOWERCASE]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUniqueIdRandomCustomMinter -->
        <test-method status="PASS" signature="testUniqueIdRandomCustomMinter(int, java.lang.String, com.hida.TokenType)[pri:0, instance:test.hida.MinterTest@5e30e1c0]" name="testUniqueIdRandomCustomMinter" duration-ms="35" started-at="2016-01-12T04:53:02Z" data-provider="customMinter parameters" finished-at="2016-01-12T04:53:02Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[79]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[uuuuu]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[UPPERCASE]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUniqueIdRandomCustomMinter -->
        <test-method status="PASS" signature="testUniqueIdRandomCustomMinter(int, java.lang.String, com.hida.TokenType)[pri:0, instance:test.hida.MinterTest@5e30e1c0]" name="testUniqueIdRandomCustomMinter" duration-ms="31" started-at="2016-01-12T04:53:02Z" data-provider="customMinter parameters" finished-at="2016-01-12T04:53:02Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[51]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[lmmmu]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[MIXEDCASE]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUniqueIdRandomCustomMinter -->
        <test-method status="PASS" signature="testUniqueIdRandomCustomMinter(int, java.lang.String, com.hida.TokenType)[pri:0, instance:test.hida.MinterTest@5e30e1c0]" name="testUniqueIdRandomCustomMinter" duration-ms="65" started-at="2016-01-12T04:53:02Z" data-provider="customMinter parameters" finished-at="2016-01-12T04:53:02Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[77]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[lulul]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[MIXEDCASE]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUniqueIdRandomCustomMinter -->
        <test-method status="PASS" signature="testUniqueIdRandomCustomMinter(int, java.lang.String, com.hida.TokenType)[pri:0, instance:test.hida.MinterTest@5e30e1c0]" name="testUniqueIdRandomCustomMinter" duration-ms="55" started-at="2016-01-12T04:53:02Z" data-provider="customMinter parameters" finished-at="2016-01-12T04:53:02Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[73]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[ldldl]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[LOWER_EXTENDED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUniqueIdRandomCustomMinter -->
        <test-method status="PASS" signature="testUniqueIdRandomCustomMinter(int, java.lang.String, com.hida.TokenType)[pri:0, instance:test.hida.MinterTest@5e30e1c0]" name="testUniqueIdRandomCustomMinter" duration-ms="32" started-at="2016-01-12T04:53:02Z" data-provider="customMinter parameters" finished-at="2016-01-12T04:53:02Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[42]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[ududu]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[UPPER_EXTENDED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUniqueIdRandomCustomMinter -->
        <test-method status="PASS" signature="testUniqueIdRandomCustomMinter(int, java.lang.String, com.hida.TokenType)[pri:0, instance:test.hida.MinterTest@5e30e1c0]" name="testUniqueIdRandomCustomMinter" duration-ms="52" started-at="2016-01-12T04:53:02Z" data-provider="customMinter parameters" finished-at="2016-01-12T04:53:02Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[84]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[uedel]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[MIXED_EXTENDED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUniqueIdRandomCustomMinter -->
        <test-method status="PASS" signature="testUniqueIdRandomCustomMinter(int, java.lang.String, com.hida.TokenType)[pri:0, instance:test.hida.MinterTest@5e30e1c0]" name="testUniqueIdRandomCustomMinter" duration-ms="90" started-at="2016-01-12T04:53:02Z" data-provider="customMinter parameters" finished-at="2016-01-12T04:53:02Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[93]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[ldmdu]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[MIXED_EXTENDED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUniqueIdRandomCustomMinter -->
        <test-method status="PASS" signature="testUniqueIdRandomCustomMinter(int, java.lang.String, com.hida.TokenType)[pri:0, instance:test.hida.MinterTest@5e30e1c0]" name="testUniqueIdRandomCustomMinter" duration-ms="31" started-at="2016-01-12T04:53:02Z" data-provider="customMinter parameters" finished-at="2016-01-12T04:53:02Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[27]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[ldudl]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[MIXED_EXTENDED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUniqueIdRandomCustomMinter -->
        <test-method status="PASS" signature="testUniqueIdSequentialCustomMinter(int, java.lang.String, com.hida.TokenType)[pri:0, instance:test.hida.MinterTest@5e30e1c0]" name="testUniqueIdSequentialCustomMinter" duration-ms="138" started-at="2016-01-12T04:53:02Z" data-provider="customMinter parameters" finished-at="2016-01-12T04:53:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[16]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[ddddd]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[DIGIT]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUniqueIdSequentialCustomMinter -->
        <test-method status="PASS" signature="testUniqueIdSequentialCustomMinter(int, java.lang.String, com.hida.TokenType)[pri:0, instance:test.hida.MinterTest@5e30e1c0]" name="testUniqueIdSequentialCustomMinter" duration-ms="401" started-at="2016-01-12T04:53:03Z" data-provider="customMinter parameters" finished-at="2016-01-12T04:53:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[94]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[lllll]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[LOWERCASE]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUniqueIdSequentialCustomMinter -->
        <test-method status="PASS" signature="testUniqueIdSequentialCustomMinter(int, java.lang.String, com.hida.TokenType)[pri:0, instance:test.hida.MinterTest@5e30e1c0]" name="testUniqueIdSequentialCustomMinter" duration-ms="208" started-at="2016-01-12T04:53:03Z" data-provider="customMinter parameters" finished-at="2016-01-12T04:53:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[49]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[uuuuu]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[UPPERCASE]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUniqueIdSequentialCustomMinter -->
        <test-method status="PASS" signature="testUniqueIdSequentialCustomMinter(int, java.lang.String, com.hida.TokenType)[pri:0, instance:test.hida.MinterTest@5e30e1c0]" name="testUniqueIdSequentialCustomMinter" duration-ms="296" started-at="2016-01-12T04:53:03Z" data-provider="customMinter parameters" finished-at="2016-01-12T04:53:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[66]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[lmmmu]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[MIXEDCASE]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUniqueIdSequentialCustomMinter -->
        <test-method status="PASS" signature="testUniqueIdSequentialCustomMinter(int, java.lang.String, com.hida.TokenType)[pri:0, instance:test.hida.MinterTest@5e30e1c0]" name="testUniqueIdSequentialCustomMinter" duration-ms="37" started-at="2016-01-12T04:53:03Z" data-provider="customMinter parameters" finished-at="2016-01-12T04:53:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[87]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[lulul]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[MIXEDCASE]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUniqueIdSequentialCustomMinter -->
        <test-method status="PASS" signature="testUniqueIdSequentialCustomMinter(int, java.lang.String, com.hida.TokenType)[pri:0, instance:test.hida.MinterTest@5e30e1c0]" name="testUniqueIdSequentialCustomMinter" duration-ms="31" started-at="2016-01-12T04:53:03Z" data-provider="customMinter parameters" finished-at="2016-01-12T04:53:04Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[60]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[ldldl]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[LOWER_EXTENDED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUniqueIdSequentialCustomMinter -->
        <test-method status="PASS" signature="testUniqueIdSequentialCustomMinter(int, java.lang.String, com.hida.TokenType)[pri:0, instance:test.hida.MinterTest@5e30e1c0]" name="testUniqueIdSequentialCustomMinter" duration-ms="32" started-at="2016-01-12T04:53:04Z" data-provider="customMinter parameters" finished-at="2016-01-12T04:53:04Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[44]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[ududu]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[UPPER_EXTENDED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUniqueIdSequentialCustomMinter -->
        <test-method status="PASS" signature="testUniqueIdSequentialCustomMinter(int, java.lang.String, com.hida.TokenType)[pri:0, instance:test.hida.MinterTest@5e30e1c0]" name="testUniqueIdSequentialCustomMinter" duration-ms="31" started-at="2016-01-12T04:53:04Z" data-provider="customMinter parameters" finished-at="2016-01-12T04:53:04Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[43]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[uedel]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[MIXED_EXTENDED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUniqueIdSequentialCustomMinter -->
        <test-method status="PASS" signature="testUniqueIdSequentialCustomMinter(int, java.lang.String, com.hida.TokenType)[pri:0, instance:test.hida.MinterTest@5e30e1c0]" name="testUniqueIdSequentialCustomMinter" duration-ms="35" started-at="2016-01-12T04:53:04Z" data-provider="customMinter parameters" finished-at="2016-01-12T04:53:04Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[80]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[ldmdu]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[MIXED_EXTENDED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUniqueIdSequentialCustomMinter -->
        <test-method status="PASS" signature="testUniqueIdSequentialCustomMinter(int, java.lang.String, com.hida.TokenType)[pri:0, instance:test.hida.MinterTest@5e30e1c0]" name="testUniqueIdSequentialCustomMinter" duration-ms="72" started-at="2016-01-12T04:53:04Z" data-provider="customMinter parameters" finished-at="2016-01-12T04:53:04Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[41]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[ldudl]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[MIXED_EXTENDED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUniqueIdSequentialCustomMinter -->
        <test-method status="PASS" signature="testUniqueIdRandomAutoMinter(int, com.hida.TokenType)[pri:0, instance:test.hida.MinterTest@5e30e1c0]" name="testUniqueIdRandomAutoMinter" duration-ms="44" started-at="2016-01-12T04:53:04Z" data-provider="autoMinter parameters" finished-at="2016-01-12T04:53:04Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[72]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[DIGIT]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUniqueIdRandomAutoMinter -->
        <test-method status="PASS" signature="testUniqueIdRandomAutoMinter(int, com.hida.TokenType)[pri:0, instance:test.hida.MinterTest@5e30e1c0]" name="testUniqueIdRandomAutoMinter" duration-ms="36" started-at="2016-01-12T04:53:04Z" data-provider="autoMinter parameters" finished-at="2016-01-12T04:53:04Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[76]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[LOWERCASE]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUniqueIdRandomAutoMinter -->
        <test-method status="PASS" signature="testUniqueIdRandomAutoMinter(int, com.hida.TokenType)[pri:0, instance:test.hida.MinterTest@5e30e1c0]" name="testUniqueIdRandomAutoMinter" duration-ms="41" started-at="2016-01-12T04:53:04Z" data-provider="autoMinter parameters" finished-at="2016-01-12T04:53:04Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[73]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[UPPERCASE]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUniqueIdRandomAutoMinter -->
        <test-method status="PASS" signature="testUniqueIdRandomAutoMinter(int, com.hida.TokenType)[pri:0, instance:test.hida.MinterTest@5e30e1c0]" name="testUniqueIdRandomAutoMinter" duration-ms="30" started-at="2016-01-12T04:53:04Z" data-provider="autoMinter parameters" finished-at="2016-01-12T04:53:04Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[26]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[MIXEDCASE]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUniqueIdRandomAutoMinter -->
        <test-method status="PASS" signature="testUniqueIdRandomAutoMinter(int, com.hida.TokenType)[pri:0, instance:test.hida.MinterTest@5e30e1c0]" name="testUniqueIdRandomAutoMinter" duration-ms="57" started-at="2016-01-12T04:53:04Z" data-provider="autoMinter parameters" finished-at="2016-01-12T04:53:04Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[47]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[LOWER_EXTENDED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUniqueIdRandomAutoMinter -->
        <test-method status="PASS" signature="testUniqueIdRandomAutoMinter(int, com.hida.TokenType)[pri:0, instance:test.hida.MinterTest@5e30e1c0]" name="testUniqueIdRandomAutoMinter" duration-ms="66" started-at="2016-01-12T04:53:04Z" data-provider="autoMinter parameters" finished-at="2016-01-12T04:53:04Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[85]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[UPPER_EXTENDED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUniqueIdRandomAutoMinter -->
        <test-method status="PASS" signature="testUniqueIdRandomAutoMinter(int, com.hida.TokenType)[pri:0, instance:test.hida.MinterTest@5e30e1c0]" name="testUniqueIdRandomAutoMinter" duration-ms="43" started-at="2016-01-12T04:53:04Z" data-provider="autoMinter parameters" finished-at="2016-01-12T04:53:04Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[96]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[MIXED_EXTENDED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUniqueIdRandomAutoMinter -->
        <test-method status="PASS" signature="testBadParameterExceptionCustomMinter(long, java.lang.String, java.lang.String, boolean)[pri:0, instance:test.hida.MinterTest@5e30e1c0]" name="testBadParameterExceptionCustomMinter" duration-ms="1" started-at="2016-01-12T04:53:04Z" data-provider="bad parameter custom" finished-at="2016-01-12T04:53:04Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-110]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[prefix]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[dlume]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <exception class="com.hida.BadParameterException">
            <message>
              <![CDATA[An invalid 'Requested Amount' was detected: -110]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.hida.BadParameterException: An invalid 'Requested Amount' was detected: -110
	at test.hida.MinterTest.testBadParameterExceptionCustomMinter(MinterTest.java:455)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:70)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:109)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:175)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:107)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:68)
]]>
            </full-stacktrace>
          </exception> <!-- com.hida.BadParameterException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBadParameterExceptionCustomMinter -->
        <test-method status="PASS" signature="testBadParameterExceptionCustomMinter(long, java.lang.String, java.lang.String, boolean)[pri:0, instance:test.hida.MinterTest@5e30e1c0]" name="testBadParameterExceptionCustomMinter" duration-ms="0" started-at="2016-01-12T04:53:04Z" data-provider="bad parameter custom" finished-at="2016-01-12T04:53:04Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[&prefix]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[dlume]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <exception class="com.hida.BadParameterException">
            <message>
              <![CDATA[An invalid 'Prefix' was detected: &prefix]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.hida.BadParameterException: An invalid 'Prefix' was detected: &prefix
	at com.hida.Minter.<init>(Minter.java:221)
	at test.hida.MinterTest.testBadParameterExceptionCustomMinter(MinterTest.java:452)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:70)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:109)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:175)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:107)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:68)
]]>
            </full-stacktrace>
          </exception> <!-- com.hida.BadParameterException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBadParameterExceptionCustomMinter -->
        <test-method status="PASS" signature="testBadParameterExceptionCustomMinter(long, java.lang.String, java.lang.String, boolean)[pri:0, instance:test.hida.MinterTest@5e30e1c0]" name="testBadParameterExceptionCustomMinter" duration-ms="0" started-at="2016-01-12T04:53:04Z" data-provider="bad parameter custom" finished-at="2016-01-12T04:53:04Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[                     ]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[dlume]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <exception class="com.hida.BadParameterException">
            <message>
              <![CDATA[An invalid 'Prefix' was detected:                      ]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.hida.BadParameterException: An invalid 'Prefix' was detected:                      
	at com.hida.Minter.<init>(Minter.java:221)
	at test.hida.MinterTest.testBadParameterExceptionCustomMinter(MinterTest.java:452)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:70)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:109)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:175)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:107)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:68)
]]>
            </full-stacktrace>
          </exception> <!-- com.hida.BadParameterException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBadParameterExceptionCustomMinter -->
        <test-method status="PASS" signature="testBadParameterExceptionCustomMinter(long, java.lang.String, java.lang.String, boolean)[pri:0, instance:test.hida.MinterTest@5e30e1c0]" name="testBadParameterExceptionCustomMinter" duration-ms="1" started-at="2016-01-12T04:53:04Z" data-provider="bad parameter custom" finished-at="2016-01-12T04:53:04Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[prefix]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[dlumea]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <exception class="com.hida.BadParameterException">
            <message>
              <![CDATA[An invalid 'detected in getToken method' was detected: dlumea]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.hida.BadParameterException: An invalid 'detected in getToken method' was detected: dlumea
	at com.hida.Minter.convertToToken(Minter.java:519)
	at com.hida.Minter.<init>(Minter.java:210)
	at test.hida.MinterTest.testBadParameterExceptionCustomMinter(MinterTest.java:452)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:70)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:109)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:175)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:107)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:68)
]]>
            </full-stacktrace>
          </exception> <!-- com.hida.BadParameterException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBadParameterExceptionCustomMinter -->
        <test-method status="PASS" signature="testFormat(int, java.lang.String, com.hida.TokenType, boolean, int)[pri:0, instance:test.hida.MinterTest@5e30e1c0]" name="testFormat" duration-ms="40" started-at="2016-01-12T04:53:04Z" data-provider="format parameters" finished-at="2016-01-12T04:53:04Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[20]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[DIGIT]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFormat -->
        <test-method status="PASS" signature="testFormat(int, java.lang.String, com.hida.TokenType, boolean, int)[pri:0, instance:test.hida.MinterTest@5e30e1c0]" name="testFormat" duration-ms="72" started-at="2016-01-12T04:53:04Z" data-provider="format parameters" finished-at="2016-01-12T04:53:04Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[82]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[LOWER_EXTENDED]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFormat -->
        <test-method status="PASS" signature="testFormat(int, java.lang.String, com.hida.TokenType, boolean, int)[pri:0, instance:test.hida.MinterTest@5e30e1c0]" name="testFormat" duration-ms="41" started-at="2016-01-12T04:53:04Z" data-provider="format parameters" finished-at="2016-01-12T04:53:04Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[54]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[UPPER_EXTENDED]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFormat -->
        <test-method status="PASS" signature="testFormat(int, java.lang.String, com.hida.TokenType, boolean, int)[pri:0, instance:test.hida.MinterTest@5e30e1c0]" name="testFormat" duration-ms="55" started-at="2016-01-12T04:53:04Z" data-provider="format parameters" finished-at="2016-01-12T04:53:04Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[70]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[MIXED_EXTENDED]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFormat -->
        <test-method status="PASS" signature="testFormat(int, java.lang.String, com.hida.TokenType, boolean, int)[pri:0, instance:test.hida.MinterTest@5e30e1c0]" name="testFormat" duration-ms="59" started-at="2016-01-12T04:53:04Z" data-provider="format parameters" finished-at="2016-01-12T04:53:04Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[37]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[LOWERCASE]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFormat -->
        <test-method status="PASS" signature="testFormat(int, java.lang.String, com.hida.TokenType, boolean, int)[pri:0, instance:test.hida.MinterTest@5e30e1c0]" name="testFormat" duration-ms="41" started-at="2016-01-12T04:53:04Z" data-provider="format parameters" finished-at="2016-01-12T04:53:04Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[57]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[6]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[UPPERCASE]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFormat -->
        <test-method status="PASS" signature="testFormat(int, java.lang.String, com.hida.TokenType, boolean, int)[pri:0, instance:test.hida.MinterTest@5e30e1c0]" name="testFormat" duration-ms="38" started-at="2016-01-12T04:53:04Z" data-provider="format parameters" finished-at="2016-01-12T04:53:04Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[39]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[7]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[MIXEDCASE]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFormat -->
        <test-method status="PASS" signature="testFormat(int, java.lang.String, com.hida.TokenType, boolean, int)[pri:0, instance:test.hida.MinterTest@5e30e1c0]" name="testFormat" duration-ms="42" started-at="2016-01-12T04:53:04Z" data-provider="format parameters" finished-at="2016-01-12T04:53:04Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[52]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[DIGIT]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFormat -->
        <test-method status="PASS" signature="testFormat(int, java.lang.String, com.hida.TokenType, boolean, int)[pri:0, instance:test.hida.MinterTest@5e30e1c0]" name="testFormat" duration-ms="45" started-at="2016-01-12T04:53:04Z" data-provider="format parameters" finished-at="2016-01-12T04:53:04Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[62]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[LOWER_EXTENDED]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFormat -->
        <test-method status="PASS" signature="testFormat(int, java.lang.String, com.hida.TokenType, boolean, int)[pri:0, instance:test.hida.MinterTest@5e30e1c0]" name="testFormat" duration-ms="38" started-at="2016-01-12T04:53:04Z" data-provider="format parameters" finished-at="2016-01-12T04:53:04Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[19]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[UPPER_EXTENDED]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFormat -->
        <test-method status="PASS" signature="testFormat(int, java.lang.String, com.hida.TokenType, boolean, int)[pri:0, instance:test.hida.MinterTest@5e30e1c0]" name="testFormat" duration-ms="54" started-at="2016-01-12T04:53:04Z" data-provider="format parameters" finished-at="2016-01-12T04:53:05Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[45]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[MIXED_EXTENDED]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFormat -->
        <test-method status="PASS" signature="testFormat(int, java.lang.String, com.hida.TokenType, boolean, int)[pri:0, instance:test.hida.MinterTest@5e30e1c0]" name="testFormat" duration-ms="47" started-at="2016-01-12T04:53:05Z" data-provider="format parameters" finished-at="2016-01-12T04:53:05Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[65]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[LOWERCASE]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFormat -->
        <test-method status="PASS" signature="testFormat(int, java.lang.String, com.hida.TokenType, boolean, int)[pri:0, instance:test.hida.MinterTest@5e30e1c0]" name="testFormat" duration-ms="48" started-at="2016-01-12T04:53:05Z" data-provider="format parameters" finished-at="2016-01-12T04:53:05Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[64]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[6]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[UPPERCASE]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFormat -->
        <test-method status="PASS" signature="testFormat(int, java.lang.String, com.hida.TokenType, boolean, int)[pri:0, instance:test.hida.MinterTest@5e30e1c0]" name="testFormat" duration-ms="36" started-at="2016-01-12T04:53:05Z" data-provider="format parameters" finished-at="2016-01-12T04:53:05Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[11]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[7]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[MIXEDCASE]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFormat -->
        <test-method status="PASS" signature="formatOverlap(int, com.hida.TokenType, boolean, int)[pri:0, instance:test.hida.MinterTest@5e30e1c0]" name="formatOverlap" duration-ms="82" started-at="2016-01-12T04:53:05Z" data-provider="overlap parameters" depends-on-methods="test.hida.MinterTest.populateAutoDigitFormat" finished-at="2016-01-12T04:53:05Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[DIGIT]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <exception class="com.hida.NotEnoughPermutationsException">
            <message>
              <![CDATA[100 ids were requested but only 0 can be created using given format]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.hida.NotEnoughPermutationsException: 100 ids were requested but only 0 can be created using given format
	at com.hida.Minter.rollIds(Minter.java:292)
	at com.hida.Minter.genIdAutoRandom(Minter.java:343)
	at test.hida.MinterTest.formatOverlap(MinterTest.java:381)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:70)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:109)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:175)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:107)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:68)
]]>
            </full-stacktrace>
          </exception> <!-- com.hida.NotEnoughPermutationsException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- formatOverlap -->
        <test-method status="PASS" signature="formatOverlap(int, com.hida.TokenType, boolean, int)[pri:0, instance:test.hida.MinterTest@5e30e1c0]" name="formatOverlap" duration-ms="2393" started-at="2016-01-12T04:53:05Z" data-provider="overlap parameters" depends-on-methods="test.hida.MinterTest.populateAutoDigitFormat" finished-at="2016-01-12T04:53:07Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[900]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[LOWER_EXTENDED]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <exception class="com.hida.NotEnoughPermutationsException">
            <message>
              <![CDATA[900 ids were requested but only 800 can be created using given format]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.hida.NotEnoughPermutationsException: 900 ids were requested but only 800 can be created using given format
	at com.hida.Minter.rollIds(Minter.java:292)
	at com.hida.Minter.genIdAutoRandom(Minter.java:343)
	at test.hida.MinterTest.formatOverlap(MinterTest.java:381)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:70)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:109)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:175)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:107)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:68)
]]>
            </full-stacktrace>
          </exception> <!-- com.hida.NotEnoughPermutationsException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- formatOverlap -->
        <test-method status="PASS" signature="formatOverlap(int, com.hida.TokenType, boolean, int)[pri:0, instance:test.hida.MinterTest@5e30e1c0]" name="formatOverlap" duration-ms="1958" started-at="2016-01-12T04:53:07Z" data-provider="overlap parameters" depends-on-methods="test.hida.MinterTest.populateAutoDigitFormat" finished-at="2016-01-12T04:53:09Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[900]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[UPPER_EXTENDED]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <exception class="com.hida.NotEnoughPermutationsException">
            <message>
              <![CDATA[900 ids were requested but only 800 can be created using given format]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.hida.NotEnoughPermutationsException: 900 ids were requested but only 800 can be created using given format
	at com.hida.Minter.rollIds(Minter.java:292)
	at com.hida.Minter.genIdAutoRandom(Minter.java:343)
	at test.hida.MinterTest.formatOverlap(MinterTest.java:381)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:70)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:109)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:175)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:107)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:68)
]]>
            </full-stacktrace>
          </exception> <!-- com.hida.NotEnoughPermutationsException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- formatOverlap -->
        <test-method status="PASS" signature="formatOverlap(int, com.hida.TokenType, boolean, int)[pri:0, instance:test.hida.MinterTest@5e30e1c0]" name="formatOverlap" duration-ms="10782" started-at="2016-01-12T04:53:09Z" data-provider="overlap parameters" depends-on-methods="test.hida.MinterTest.populateAutoDigitFormat" finished-at="2016-01-12T04:53:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2500]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[MIXED_EXTENDED]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <exception class="com.hida.NotEnoughPermutationsException">
            <message>
              <![CDATA[2500 ids were requested but only 2400 can be created using given format]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.hida.NotEnoughPermutationsException: 2500 ids were requested but only 2400 can be created using given format
	at com.hida.Minter.rollIds(Minter.java:292)
	at com.hida.Minter.genIdAutoRandom(Minter.java:343)
	at test.hida.MinterTest.formatOverlap(MinterTest.java:381)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:70)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:109)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:175)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:107)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:68)
]]>
            </full-stacktrace>
          </exception> <!-- com.hida.NotEnoughPermutationsException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- formatOverlap -->
        <test-method status="PASS" signature="tearDownClass()[pri:0, instance:test.hida.MinterTest@5e30e1c0]" name="tearDownClass" is-config="true" duration-ms="1" started-at="2016-01-12T04:53:20Z" finished-at="2016-01-12T04:53:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownClass -->
        <test-method status="PASS" signature="tearDownTest()[pri:0, instance:test.hida.MinterTest@5e30e1c0]" name="tearDownTest" is-config="true" duration-ms="1" started-at="2016-01-12T04:53:20Z" finished-at="2016-01-12T04:53:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
      </class> <!-- test.hida.MinterTest -->
    </test> <!-- Command line test -->
  </suite> <!-- test.hida.MinterTest -->
</testng-results>
